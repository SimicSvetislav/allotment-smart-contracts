package rs.ac.uns.ftn.informatics.legal_tech.allotment.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple10;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.15.
 */
@SuppressWarnings("rawtypes")
public class Allotment extends Contract {
    public static final String BINARY = "";

    public static final String FUNC__ACCOMODATIONADDRESS = "_accomodationAddress";

    public static final String FUNC__ACCOMODATIONAGREED = "_accomodationAgreed";

    public static final String FUNC__ADVANCEPAYMENT = "_advancePayment";

    public static final String FUNC__AGENCYADDRESS = "_agencyAddress";

    public static final String FUNC__AGENCYAGREED = "_agencyAgreed";

    public static final String FUNC__AGREEMENTDATE = "_agreementDate";

    public static final String FUNC__BADOFFSEASONMAXPENALTY = "_badOffSeasonMaxPenalty";

    public static final String FUNC__BEDOPTIONS = "_bedOptions";

    public static final String FUNC__CLAUSE = "_clause";

    public static final String FUNC__COMMISION = "_commision";

    public static final String FUNC__COURTINCHARGE = "_courtInCharge";

    public static final String FUNC__ENDDATE = "_endDate";

    public static final String FUNC__FINEPERBED = "_finePerBed";

    public static final String FUNC__HOTELS = "_hotels";

    public static final String FUNC__IDENTIFIEDACCREPR = "_identifiedAccRepr";

    public static final String FUNC__IDENTIFIEDAGREPR = "_identifiedAgRepr";

    public static final String FUNC__INFORMINGPERIOD = "_informingPeriod";

    public static final String FUNC__KIDPRICE = "_kidPrice";

    public static final String FUNC__MAINSEASONEND = "_mainSeasonEnd";

    public static final String FUNC__MAINSEASONSTART = "_mainSeasonStart";

    public static final String FUNC__PRESEASONMINIMUM = "_preSeasonMinimum";

    public static final String FUNC__PRICEFB = "_priceFB";

    public static final String FUNC__PRICEHB = "_priceHB";

    public static final String FUNC__PRICEOS = "_priceOS";

    public static final String FUNC__RESERVATIONS = "_reservations";

    public static final String FUNC__RESTRICTION = "_restriction";

    public static final String FUNC__ROOMSBYBEDNUMBERS = "_roomsByBedNumbers";

    public static final String FUNC__STARTDATE = "_startDate";

    public static final String FUNC__STATUS = "_status";

    public static final String FUNC__TOTALBEDS = "_totalBeds";

    public static final String FUNC__TOTALRESERVATIONS = "_totalReservations";

    public static final String FUNC__WITHDRAWALPERIOD = "_withdrawalPeriod";

    public static final String FUNC__WITHDRAWALS = "_withdrawals";

    public static final String FUNC_ACCOMODATIONAGREED = "accomodationAgreed";

    public static final String FUNC_ADDDAYS2 = "addDays2";

    public static final String FUNC_AGENCYAGREED = "agencyAgreed";

    public static final String FUNC_BREAKCONTRACT = "breakContract";

    public static final String FUNC_CHECKOFFSEASON = "checkOffseason";

    public static final String FUNC_CONTRACTBALANCE = "contractBalance";

    public static final String FUNC_DAYINRANGE = "dayInRange";

    public static final String FUNC_FINALIZECONTRACT = "finalizeContract";

    public static final String FUNC_GETALLRESASBYTES = "getAllResAsBytes";

    public static final String FUNC_GETCONTRACTINFOASBYTES = "getContractInfoAsBytes";

    public static final String FUNC_GETCOURTINFO = "getCourtInfo";

    public static final String FUNC_GETHOTELS = "getHotels";

    public static final String FUNC_GETINITIALTRANSFERVALUE = "getInitialTransferValue";

    public static final String FUNC_GETROOMSINFO = "getRoomsInfo";

    public static final String FUNC_GETWITHDRAWALSASBYTES = "getWithdrawalsAsBytes";

    public static final String FUNC_INCLUDING = "including";

    public static final String FUNC_ISAFTER = "isAfter";

    public static final String FUNC_ISAFTERORSAME = "isAfterOrSame";

    public static final String FUNC_ISBEFORE = "isBefore";

    public static final String FUNC_ISBEFOREORSAME = "isBeforeOrSame";

    public static final String FUNC_ISINRANGE = "isInRange";

    public static final String FUNC_ISSAME = "isSame";

    public static final String FUNC_OCCUPIEDBEDS = "occupiedBeds";

    public static final String FUNC_OVERLAPPING = "overlapping";

    public static final String FUNC_RESERVE = "reserve";

    public static final String FUNC_TODATE = "toDate";

    public static final String FUNC_VERIFYROOMINGLIST = "verifyRoomingList";

    public static final String FUNC_WITHDRAWROOMS = "withdrawRooms";

    @Deprecated
    protected Allotment(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Allotment(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Allotment(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Allotment(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> _accomodationAddress() {
        final Function function = new Function(FUNC__ACCOMODATIONADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> _accomodationAgreed() {
        final Function function = new Function(FUNC__ACCOMODATIONAGREED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> _advancePayment() {
        final Function function = new Function(FUNC__ADVANCEPAYMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> _agencyAddress() {
        final Function function = new Function(FUNC__AGENCYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> _agencyAgreed() {
        final Function function = new Function(FUNC__AGENCYAGREED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> _agreementDate() {
        final Function function = new Function(FUNC__AGREEMENTDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _badOffSeasonMaxPenalty() {
        final Function function = new Function(FUNC__BADOFFSEASONMAXPENALTY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _bedOptions(BigInteger param0) {
        final Function function = new Function(FUNC__BEDOPTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> _clause() {
        final Function function = new Function(FUNC__CLAUSE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> _commision() {
        final Function function = new Function(FUNC__COMMISION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<String, String>> _courtInCharge() {
        final Function function = new Function(FUNC__COURTINCHARGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> _endDate() {
        final Function function = new Function(FUNC__ENDDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _finePerBed() {
        final Function function = new Function(FUNC__FINEPERBED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _hotels(BigInteger param0) {
        final Function function = new Function(FUNC__HOTELS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _identifiedAccRepr() {
        final Function function = new Function(FUNC__IDENTIFIEDACCREPR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _identifiedAgRepr() {
        final Function function = new Function(FUNC__IDENTIFIEDAGREPR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _informingPeriod() {
        final Function function = new Function(FUNC__INFORMINGPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _kidPrice() {
        final Function function = new Function(FUNC__KIDPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _mainSeasonEnd() {
        final Function function = new Function(FUNC__MAINSEASONEND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _mainSeasonStart() {
        final Function function = new Function(FUNC__MAINSEASONSTART, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _preSeasonMinimum() {
        final Function function = new Function(FUNC__PRESEASONMINIMUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _priceFB() {
        final Function function = new Function(FUNC__PRICEFB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _priceHB() {
        final Function function = new Function(FUNC__PRICEHB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _priceOS() {
        final Function function = new Function(FUNC__PRICEOS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger, BigInteger>> _reservations(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC__RESERVATIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger, BigInteger>>(function,
                new Callable<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, Boolean, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (BigInteger) results.get(9).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> _restriction() {
        final Function function = new Function(FUNC__RESTRICTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> _roomsByBedNumbers(BigInteger param0) {
        final Function function = new Function(FUNC__ROOMSBYBEDNUMBERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _startDate() {
        final Function function = new Function(FUNC__STARTDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _status() {
        final Function function = new Function(FUNC__STATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _totalBeds() {
        final Function function = new Function(FUNC__TOTALBEDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _totalReservations() {
        final Function function = new Function(FUNC__TOTALRESERVATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _withdrawalPeriod() {
        final Function function = new Function(FUNC__WITHDRAWALPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> _withdrawals(BigInteger param0) {
        final Function function = new Function(FUNC__WITHDRAWALS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> accomodationAgreed(BigInteger accReprId) {
        final Function function = new Function(
                FUNC_ACCOMODATIONAGREED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(accReprId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> addDays2(BigInteger timestamp, BigInteger daysToAdd) {
        final Function function = new Function(FUNC_ADDDAYS2, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp), 
                new org.web3j.abi.datatypes.generated.Uint256(daysToAdd)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> agencyAgreed(BigInteger agReprId) {
        final Function function = new Function(
                FUNC_AGENCYAGREED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(agReprId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> breakContract(BigInteger representativeId) {
        final Function function = new Function(
                FUNC_BREAKCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(representativeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> checkOffseason() {
        final Function function = new Function(
                FUNC_CHECKOFFSEASON, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> contractBalance() {
        final Function function = new Function(FUNC_CONTRACTBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> dayInRange(BigInteger checkDate, BigInteger startRange, BigInteger endRange) {
        final Function function = new Function(FUNC_DAYINRANGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(checkDate), 
                new org.web3j.abi.datatypes.generated.Uint256(startRange), 
                new org.web3j.abi.datatypes.generated.Uint256(endRange)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> finalizeContract() {
        final Function function = new Function(
                FUNC_FINALIZECONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> getAllResAsBytes() {
        final Function function = new Function(FUNC_GETALLRESASBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> getContractInfoAsBytes() {
        final Function function = new Function(FUNC_GETCONTRACTINFOASBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getCourtInfo() {
        final Function function = new Function(FUNC_GETCOURTINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getHotels() {
        final Function function = new Function(FUNC_GETHOTELS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getInitialTransferValue() {
        final Function function = new Function(FUNC_GETINITIALTRANSFERVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> getRoomsInfo() {
        final Function function = new Function(FUNC_GETROOMSINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> getWithdrawalsAsBytes() {
        final Function function = new Function(FUNC_GETWITHDRAWALSASBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> including(BigInteger from1, BigInteger to1, BigInteger from2, BigInteger to2) {
        final Function function = new Function(FUNC_INCLUDING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(from1), 
                new org.web3j.abi.datatypes.generated.Uint256(to1), 
                new org.web3j.abi.datatypes.generated.Uint256(from2), 
                new org.web3j.abi.datatypes.generated.Uint256(to2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isAfter(BigInteger timestamp1, BigInteger timestamp2) {
        final Function function = new Function(FUNC_ISAFTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isAfterOrSame(BigInteger timestamp1, BigInteger timestamp2) {
        final Function function = new Function(FUNC_ISAFTERORSAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isBefore(BigInteger timestamp1, BigInteger timestamp2) {
        final Function function = new Function(FUNC_ISBEFORE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isBeforeOrSame(BigInteger timestamp1, BigInteger timestamp2) {
        final Function function = new Function(FUNC_ISBEFOREORSAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isInRange(BigInteger checkDate, BigInteger daysFromToday) {
        final Function function = new Function(FUNC_ISINRANGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(checkDate), 
                new org.web3j.abi.datatypes.generated.Uint256(daysFromToday)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isSame(BigInteger timestamp1, BigInteger timestamp2) {
        final Function function = new Function(FUNC_ISSAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> occupiedBeds(BigInteger day) {
        final Function function = new Function(FUNC_OCCUPIEDBEDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(day)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> overlapping(BigInteger from1, BigInteger to1, BigInteger from2, BigInteger to2) {
        final Function function = new Function(FUNC_OVERLAPPING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(from1), 
                new org.web3j.abi.datatypes.generated.Uint256(to1), 
                new org.web3j.abi.datatypes.generated.Uint256(from2), 
                new org.web3j.abi.datatypes.generated.Uint256(to2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> reserve(List<BigInteger> reservation) {
        final Function function = new Function(
                FUNC_RESERVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray6<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(reservation, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> toDate(BigInteger timestamp) {
        final Function function = new Function(FUNC_TODATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> verifyRoomingList(BigInteger beds, BigInteger reservationId) {
        final Function function = new Function(
                FUNC_VERIFYROOMINGLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(beds), 
                new org.web3j.abi.datatypes.generated.Uint256(reservationId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawRooms(BigInteger startDate, BigInteger endDate) {
        final Function function = new Function(
                FUNC_WITHDRAWROOMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Allotment load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Allotment(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Allotment load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Allotment(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Allotment load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Allotment(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Allotment load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Allotment(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Allotment> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray6<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Allotment> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray6<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Allotment> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray6<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Allotment> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray6<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
