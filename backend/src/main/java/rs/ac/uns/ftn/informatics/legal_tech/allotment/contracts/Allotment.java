package rs.ac.uns.ftn.informatics.legal_tech.allotment.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.15.
 */
@SuppressWarnings("rawtypes")
public class Allotment extends Contract {
    public static final String BINARY = "6080604052600080556002805461ffff60a01b191690556010805460ff191690553480156200002d57600080fd5b5060405162003e2d38038062003e2d83398181016040526102c08110156200005457600080fd5b81516020830151604080850151606086015160808701805193519597949692959194919392820192846401000000008211156200009057600080fd5b908301906020820185811115620000a657600080fd5b8251866020820283011164010000000082111715620000c457600080fd5b82525081516020918201928201910280838360005b83811015620000f3578181015183820152602001620000d9565b50505050905001604052602001919082608001919082608001805160405193929190846401000000008211156200012957600080fd5b9083019060208201858111156200013f57600080fd5b82518660208202830111640100000000821117156200015d57600080fd5b82525081516020918201928201910280838360005b838110156200018c57818101518382015260200162000172565b505050509190910160408190526060830151608084015160a085015160c086015160e08701805160209098019994989397929650909493929184640100000000821115620001d957600080fd5b908301906020820185811115620001ef57600080fd5b82516401000000008111828201881017156200020a57600080fd5b82525081516020918201929091019080838360005b83811015620002395781810151838201526020016200021f565b50505050905090810190601f168015620002675780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200028b57600080fd5b908301906020820185811115620002a157600080fd5b8251640100000000811182820188101715620002bc57600080fd5b82525081516020918201929091019080838360005b83811015620002eb578181015183820152602001620002d1565b50505050905090810190601f168015620003195780820380516001836020036101000a031916815260200191505b506040525050508e600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508d600260006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620003808c8e620006cc60201b60201c565b620003bd5760405162461bcd60e51b815260040180806020018281038252602281526020018062003e0b6022913960400191505060405180910390fd5b60038d905560048c90558a51620003dc9060059060208e019062000879565b5060208a01518a5163ffffffff91821691161115620003f757fe5b89516006805460208d015160408e015163ffffffff90811668010000000000000000029181166401000000000263ffffffff1990931694169390931763ffffffff60201b19161763ffffffff60401b19169190911790558851601260ff909116106200045f57fe5b88516006805460608d81015160208e015160408f0151928f015160ff938416600160901b02918416600160881b0263ffffffff9093166d0100000000000000000000000000029684166c010000000000000000000000000260ff60601b199095169490941763ffffffff60681b19169590951760ff60881b19161760ff60901b19169390931760ff60981b1916600160981b9390911692909202919091179055875188906000906200050d57fe5b6020908102919091010151600755875160001901601355600060015b89518160ff1610156200060057898160ff16815181106200054657fe5b60209081029190910181015160ff8316600081815260089093526040909220558a518b90829081106200057557fe5b6020026020010151028201915060008a8260ff16815181106200059457fe5b60200260200101511115620005f75760158054600181018255600091909152602081047f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47501805460ff808516601f9094166101000a938402930219169190911790555b60010162000529565b5080896000815181106200061057fe5b6020026020010151146200062057fe5b8751600980546020808c015161ffff1990921661ffff9485161763ffff000019166201000094909216939093021760ff60201b19166401000000008a151502179055600a879055600b805460ff191660ff8816179055600c85905583516200068f91600d9190860190620008c9565b508151620006a590600e906020850190620008c9565b50506014805460ff1916905550506000601655506200095b9b505050505050505050505050565b6000620006e383836001600160e01b03620006f216565b60000b60011490505b92915050565b60008080806200070b866001600160e01b03620007b816565b91945092509050600080806200072a886001600160e01b03620007b816565b925092509250828610156200074a576000199650505050505050620006ec565b82861415620007a957818510156200076d576000199650505050505050620006ec565b81851415620007a9578084101562000790576000199650505050505050620006ec565b80841415620007a95760009650505050505050620006ec565b50600198975050505050505050565b60008080620007d56201518085046001600160e01b03620007e216565b9196909550909350915050565b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f84605002816200083a57fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b828054828255906000526020600020908101928215620008b7579160200282015b82811115620008b75782518255916020019190600101906200089a565b50620008c59291506200093b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200090c57805160ff1916838001178555620008b7565b82800160010185558215620008b75791820182811115620008b75782518255916020019190600101906200089a565b6200095891905b80821115620008c5576000815560010162000942565b90565b6134a0806200096b6000396000f3fe6080604052600436106103395760003560e01c8063a4c98a42116101ab578063ca48a1d8116100f7578063df662aad11610095578063e66a07b11161006f578063e66a07b114610b5b578063e925df5c14610b8b578063fbf4607714610bc7578063ffe3203c14610c0357610340565b8063df662aad14610afb578063dfa5d6d314610a0e578063e1bcfac814610b2b57610340565b8063d3db6197116100d1578063d3db619714610aa7578063d5735cc714610abc578063d6c3d0ee14610ad1578063dbfa586314610ae657610340565b8063ca48a1d814610a4d578063cd50c24514610a62578063d17f56d714610a9257610340565b8063b0ccd25b11610164578063c5b69dd31161013e578063c5b69dd3146109f9578063c7f1911b14610a0e578063c849f2af14610a23578063c89d7f1814610a3857610340565b8063b0ccd25b146109c7578063bbd52007146109dc578063c1222642146109f157610340565b8063a4c98a42146108fe578063a521df9f1461092e578063a5e2c64214610943578063a6eb00c414610973578063a9af12f614610988578063ac8daba0146109b257610340565b80636a2fea33116102855780638ebcccc8116102235780639ccb6b26116101fd5780639ccb6b261461086f5780639e233af514610884578063a08f11b11461088c578063a11e22d9146108b657610340565b80638ebcccc8146107fa57806397d3c35e146108275780639b54be261461083c57610340565b80637d11af031161025f5780637d11af031461079157806388b5bab8146107a65780638b7afe2e146107bb5780638d263eaf146107d057610340565b80636a2fea33146106fa5780636abeb25e146107305780637a77724c1461076057610340565b806344c1fb4b116102f25780635aa756b5116102cc5780635aa756b51461059d5780635e0cda94146105c85780635e413daf146106bb57806368aaa4f5146106e557610340565b806344c1fb4b146104eb57806345d6dce21461050057806349ef2c341461052c57610340565b8063023a051e146103425780630d2e677a146103755780631fc189d8146103da5780632cc9caf31461041e5780632ed536c5146104a85780632f78d0cd146104d657610340565b3661034057005b005b34801561034e57600080fd5b506103406004803603602081101561036557600080fd5b50356001600160a01b0316610c18565b34801561038157600080fd5b5061038a610c83565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103c65781810151838201526020016103ae565b505050509050019250505060405180910390f35b3480156103e657600080fd5b5061040a600480360360408110156103fd57600080fd5b5080359060200135610cdb565b604080519115158252519081900360200190f35b34801561042a57600080fd5b50610433610cf7565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561046d578181015183820152602001610455565b50505050905090810190601f16801561049a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104b457600080fd5b506104bd610e1d565b6040805163ffffffff9092168252519081900360200190f35b3480156104e257600080fd5b506104bd610e30565b3480156104f757600080fd5b5061040a610e44565b34801561050c57600080fd5b50610515610e55565b6040805161ffff9092168252519081900360200190f35b34801561053857600080fd5b5061058b600480360360a081101561054f57600080fd5b810190808060a001906005806020026040519081016040528092919082600560200280828437600092019190915250919450610e5f9350505050565b60408051918252519081900360200190f35b3480156105a957600080fd5b506105b261133c565b6040805160ff9092168252519081900360200190f35b3480156105d457600080fd5b506105dd61134c565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561061e578181015183820152602001610606565b50505050905090810190601f16801561064b5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561067e578181015183820152602001610666565b50505050905090810190601f1680156106ab5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156106c757600080fd5b5061058b600480360360208110156106de57600080fd5b503561147c565b3480156106f157600080fd5b5061043361149a565b34801561070657600080fd5b5061040a6004803603606081101561071d57600080fd5b50803590602081013590604001356118fb565b34801561073c57600080fd5b5061040a6004803603604081101561075357600080fd5b5080359060200135611930565b34801561076c57600080fd5b5061077561194a565b604080516001600160a01b039092168252519081900360200190f35b34801561079d57600080fd5b5061040a611959565b3480156107b257600080fd5b506105b2611969565b3480156107c757600080fd5b5061058b611979565b3480156107dc57600080fd5b50610433600480360360208110156107f357600080fd5b503561197d565b34801561080657600080fd5b5061058b6004803603602081101561081d57600080fd5b503560ff16611d6c565b34801561083357600080fd5b5061058b611d7e565b34801561084857600080fd5b506103406004803603602081101561085f57600080fd5b50356001600160a01b0316611d84565b34801561087b57600080fd5b506104bd611def565b610340611dfb565b34801561089857600080fd5b50610340600480360360208110156108af57600080fd5b5035611ec2565b3480156108c257600080fd5b506108e0600480360360208110156108d957600080fd5b5035612039565b60408051938452602084019290925282820152519081900360600190f35b34801561090a57600080fd5b5061040a6004803603604081101561092157600080fd5b5080359060200135612054565b34801561093a57600080fd5b50610433612070565b34801561094f57600080fd5b5061040a6004803603604081101561096657600080fd5b50803590602001356120a9565b34801561097f57600080fd5b506103406120c4565b34801561099457600080fd5b5061058b600480360360208110156109ab57600080fd5b5035612156565b3480156109be57600080fd5b5061058b612204565b3480156109d357600080fd5b506105b261220a565b3480156109e857600080fd5b5061058b61221a565b610340612220565b348015610a0557600080fd5b506104336122df565b348015610a1a57600080fd5b5061034061242e565b348015610a2f57600080fd5b5061040a6124e0565b348015610a4457600080fd5b506105156124f0565b348015610a5957600080fd5b506105b2612500565b348015610a6e57600080fd5b5061040a60048036036040811015610a8557600080fd5b5080359060200135612510565b348015610a9e57600080fd5b5061058b612527565b348015610ab357600080fd5b506105b261252d565b348015610ac857600080fd5b506104bd612536565b348015610add57600080fd5b50610775612549565b348015610af257600080fd5b5061058b612558565b348015610b0757600080fd5b5061040a60048036036040811015610b1e57600080fd5b508035906020013561255e565b348015610b3757600080fd5b5061058b60048036036040811015610b4e57600080fd5b5080359060200135612586565b348015610b6757600080fd5b5061058b60048036036040811015610b7e57600080fd5b5080359060200135612592565b348015610b9757600080fd5b5061040a60048036036080811015610bae57600080fd5b5080359060208101359060408101359060600135612a89565b348015610bd357600080fd5b5061040a60048036036080811015610bea57600080fd5b5080359060208101359060408101359060600135612b14565b348015610c0f57600080fd5b50610433612bb5565b6001546001600160a01b03163314610c615760405162461bcd60e51b815260040180806020018281038252602b815260200180613409602b913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60606005805480602002602001604051908101604052809291908181526020018280548015610cd157602002820191906000526020600020905b815481526020019060010190808311610cbd575b5050505050905090565b6000610ce78383613077565b60000b6001141590505b92915050565b60155460408051918102808352601f19601f82011683016020018252606092908015610d2a576020820181803683370190505b50915060005b601554811015610e1857600060158281548110610d4957fe5b600091825260208083208183040154601f9092166101000a90910460ff1680835260089091526040822054909250905b6020811015610e0a5780601f0360080260020a8360ff1681610d9757fe5b0460f81b86828688020181518110610dab57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8281610dd457fe5b0460f81b86828688020160200181518110610deb57fe5b60200101906001600160f81b031916908160001a905350600101610d79565b505050806001019050610d30565b505090565b600654600160681b900463ffffffff1681565b600654640100000000900463ffffffff1681565b600954640100000000900460ff1681565b60095461ffff1681565b6001546000906001600160a01b03163314610eab5760405162461bcd60e51b815260040180806020018281038252602b815260200180613409602b913960400191505060405180910390fd5b600254600160a01b900460ff168015610ecd5750600254600160a81b900460ff165b610f0c576040805162461bcd60e51b815260206004820152601c6024820152600080516020613389833981519152604482015290519081900360640190fd5b60005b6005811015611336576000838260058110610f2657fe5b602002015190506000848360010160058110610f3e57fe5b60200201519050610f556003546004548484612b14565b610f905760405162461bcd60e51b815260040180806020018281038252602b81526020018061333b602b913960400191505060405180910390fd5b6000858460020160058110610fa157fe5b602002015190506000868560030160058110610fb957fe5b602002015190506000878660040160058110610fd157fe5b602002015190506060600f6000858152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156110845760008481526020908190206040805160e0810182526007860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460ff16151560c0830152908352909201910161100d565b50505060ff861660009081526008602052604090205491925050806110da5760405162461bcd60e51b815260040180806020018281038252602f8152602001806133a9602f913960400191505060405180910390fd5b838110156111195760405162461bcd60e51b81526004018080602001828103825260238152602001806133666023913960400191505060405180910390fd5b6000805b83518110156111c65761112e6132c0565b84828151811061113a57fe5b602002602001015190506111588a8a83602001518460400151612a89565b156111bd578060600151830192508284038711156111bd576040805162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820766163616e7420726f6f6d73000000000000000000604482015290519081900360640190fd5b5060010161111d565b50600084600114156111e1575060065463ffffffff1661126d565b84600214156112015750600654640100000000900463ffffffff1661126d565b84600314156112205750600654600160401b900463ffffffff1661126d565b6040805162461bcd60e51b815260206004820152601e60248201527f5072696365207479706520737065636966696564206e6f742076616c69640000604482015290519081900360640190fd5b8087028b019a5061127c6132c0565b50506040805160e081018252600080546001908101808355835260208084019c8d528385019b8c5260608401998a52608084018f815260a08501998a5260c085018481529b8452600f82529483208054808401825590845292209251600790920290920190815599518a820155975160028a0155945160038901555050915160048601555160058086019190915591516006909401805460ff19169415159490941790935560168054909201909155919091019050610f0f565b50919050565b600654600160881b900460ff1681565b600d8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281529183918301828280156113d45780601f106113a9576101008083540402835291602001916113d4565b820191906000526020600020905b8154815290600101906020018083116113b757829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114725780601f1061144757610100808354040283529160200191611472565b820191906000526020600020905b81548152906001019060200180831161145557829003601f168201915b5050505050905082565b6005818154811061148957fe5b600091825260209091200154905081565b6060601654610100026040519080825280601f01601f1916602001820160405280156114cd576020820181803683370190505b5090506000805b60155460ff82161015610e1857600060158260ff16815481106114f357fe5b600091825260208083208183040154601f9092166101000a90910460ff16808352600f82526040808420805482518186028101860190935280835292955060609491939092919084015b828210156115b45760008481526020908190206040805160e0810182526007860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460ff16151560c0830152908352909201910161153d565b509293506000925050505b81518110156118e75760008282815181106115d657fe5b602002602001015160000151905060008383815181106115f257fe5b6020026020010151602001519050600084848151811061160e57fe5b6020026020010151604001519050600085858151811061162a57fe5b6020026020010151606001519050600086868151811061164657fe5b6020026020010151608001519050600087878151811061166257fe5b602002602001015160a001519050600088888151811061167e57fe5b602002602001015160c00151611695576000611698565b60015b60ff90811691508a1660005b60208110156118d25780601f0360080260020a89816116bf57fe5b0460f81b8f8f838d610100020101815181106116d757fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a888161170057fe5b0460f81b8f8f838d6101000201602001018151811061171b57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a878161174457fe5b0460f81b8f8f838d6101000201604001018151811061175f57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a868161178857fe5b0460f81b8f8f838d610100020160600101815181106117a357fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a85816117cc57fe5b0460f81b8f8f838d610100020160800101815181106117e757fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a848161181057fe5b0460f81b8f8f838d610100020160a001018151811061182b57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a838161185457fe5b0460f81b8f8f838d610100020160c001018151811061186f57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a828161189857fe5b0460f81b8f8f838d610100020160e00101815181106118b357fe5b60200101906001600160f81b031916908160001a9053506001016116a4565b5050600190970196506115bf95505050505050565b5051610100029290920191506001016114d4565b60006119078484612054565b801561191857506119188483610cdb565b1561192557506001611929565b5060005b9392505050565b600061193c8383613077565b60000b600114905092915050565b6002546001600160a01b031681565b600254600160a81b900460ff1681565b600654600160601b900460ff1681565b4790565b6000818152600f602090815260408083208054825181850281018501909352808352606094859484015b82821015611a1e5760008481526020908190206040805160e0810182526007860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460ff16151560c083015290835290920191016119a7565b50505050905060006101009050815181026040519080825280601f01601f191660200182016040528015611a59576020820181803683370190505b50925060005b8251811015611d64576000838281518110611a7657fe5b60200260200101516000015190506000848381518110611a9257fe5b60200260200101516020015190506000858481518110611aae57fe5b60200260200101516040015190506000868581518110611aca57fe5b60200260200101516060015190506000878681518110611ae657fe5b60200260200101516080015190506000888781518110611b0257fe5b602002602001015160a0015190506000898881518110611b1e57fe5b602002602001015160c00151611b35576000611b38565b60015b60ff1690508b60005b6020811015611d4f5780601f0360080260020a8981611b5c57fe5b0460f81b8d828c8e020181518110611b7057fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8881611b9957fe5b0460f81b8d828c8e020160200181518110611bb057fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8781611bd957fe5b0460f81b8d828c8e020160400181518110611bf057fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8681611c1957fe5b0460f81b8d828c8e020160600181518110611c3057fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8581611c5957fe5b0460f81b8d828c8e020160800181518110611c7057fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8481611c9957fe5b0460f81b8d828c8e020160a00181518110611cb057fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8381611cd957fe5b0460f81b8d828c8e020160c00181518110611cf057fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8281611d1957fe5b0460f81b8d828c8e020160e00181518110611d3057fe5b60200101906001600160f81b031916908160001a905350600101611b41565b505060019097019650611a5f95505050505050565b505050919050565b60086020526000908152604090205481565b600a5481565b6002546001600160a01b03163314611dcd5760405162461bcd60e51b81526004018080602001828103825260318152602001806133d86031913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60065463ffffffff1681565b6001546001600160a01b03163314611e445760405162461bcd60e51b815260040180806020018281038252602b815260200180613409602b913960400191505060405180910390fd5b600254600160a01b900460ff16611ec0576002805460ff60a01b1916600160a01b1790819055600160a81b900460ff16151560011415611ec057600254600a546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015611eba573d6000803e3d6000fd5b50426012555b565b6001546001600160a01b03163314611f0b5760405162461bcd60e51b815260040180806020018281038252602b815260200180613409602b913960400191505060405180910390fd5b600254600160a01b900460ff168015611f2d5750600254600160a81b900460ff165b611f6c576040805162461bcd60e51b815260206004820152601c6024820152600080516020613389833981519152604482015290519081900360640190fd5b6060600f6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156120185760008481526020908190206040805160e0810182526007860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460ff16151560c08301529083529092019101611fa1565b509293506000925050505b815181101561203457600101612023565b505050565b60008060006120478461311e565b9196909550909350915050565b60006120608383613077565b60000b6000191415905092915050565b6040518060400160405280601d81526020017f5a616b6f6e206f206f626c69676163696f6e696d206f646e6f73696d6100000081525081565b60006120b58383613077565b60000b60001914905092915050565b600147101561211a576040805162461bcd60e51b815260206004820152601a60248201527f5468657265206973206e6f7420656e6f75676820657468657221000000000000604482015290519081900360640190fd5b6002546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015612153573d6000803e3d6000fd5b50565b6000818152600f602090815260408083208054825181850281018501909352808352606093859084015b828210156121f75760008481526020908190206040805160e0810182526007860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460ff16151560c08301529083529092019101612180565b5050915195945050505050565b60035481565b600654600160901b900460ff1681565b600c5481565b6002546001600160a01b031633146122695760405162461bcd60e51b81526004018080602001828103825260318152602001806133d86031913960400191505060405180910390fd5b600254600160a81b900460ff16611ec0576002805460ff60a81b1916600160a81b1790819055600160a01b900460ff16151560011415611ec057600254600a546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015611eba573d6000803e3d6000fd5b606080604051806040016040528060018152602001600160fe1b815250905060606123b76123a9600d6000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561239f5780601f106123745761010080835404028352916020019161239f565b820191906000526020600020905b81548152906001019060200180831161238257829003601f168201915b5050505050613130565b6123b284613130565b613155565b90506124276123c582613130565b600e8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526123b2939092909183018282801561239f5780601f106123745761010080835404028352916020019161239f565b9250505090565b6001546001600160a01b031633146124775760405162461bcd60e51b815260040180806020018281038252602b815260200180613409602b913960400191505060405180910390fd5b600254600160a01b900460ff1680156124995750600254600160a81b900460ff165b6124d8576040805162461bcd60e51b815260206004820152601c6024820152600080516020613389833981519152604482015290519081900360640190fd5b611ec06131c9565b600254600160a01b900460ff1681565b60095462010000900461ffff1681565b600654600160981b900460ff1681565b600061251c8383613077565b60000b159392505050565b60075481565b600b5460ff1681565b600654600160401b900463ffffffff1681565b6001546001600160a01b031681565b60045481565b60008061256b42846131d7565b90506125778482611930565b15611925576001915050610cf1565b600061192983836131d7565b6001546000906001600160a01b031633146125de5760405162461bcd60e51b815260040180806020018281038252602b815260200180613409602b913960400191505060405180910390fd5b600254600160a01b900460ff1680156126005750600254600160a81b900460ff165b61263f576040805162461bcd60e51b815260206004820152601c6024820152600080516020613389833981519152604482015290519081900360640190fd5b600954640100000000900460ff16156126895760405162461bcd60e51b81526004018080602001828103825260378152602001806134346037913960400191505060405180910390fd5b61269383836120a9565b6126db576040805162461bcd60e51b815260206004820152601460248201527311185d19481c985b99d9481b9bdd081d985b1a5960621b604482015290519081900360640190fd5b6126e783600354612054565b612738576040805162461bcd60e51b815260206004820152601760248201527f53746172742064617465206f7574206f662072616e6765000000000000000000604482015290519081900360640190fd5b61274482600454610cdb565b61278d576040805162461bcd60e51b8152602060048201526015602482015274456e642064617465206f7574206f662072616e676560581b604482015290519081900360640190fd5b6009546000906127a890859062010000900461ffff1661255e565b9050801561283a576127b86132ff565b5050604080518082019091528381526020810183815260118054600181018255600091825292517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6860029094029384015590517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c69909201919091559050610cf1565b6128426132ff565b50604080518082019091528481526020810184815260118054600181018255600091825283517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6860029092029182015591517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c699092019190915585905b6128c98287612510565b612a3b5760008060015b6013548160ff1611612a205760ff8116600081815260086020908152604080832054600f835281842080548351818602810186019094528084529190950297909701966060949193919290919084015b8282101561299a5760008481526020908190206040805160e0810182526007860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460ff16151560c08301529083529092019101612923565b509293506000925050505b8151811015612a16576129e7878383815181106129be57fe5b6020026020010151602001518484815181106129d657fe5b6020026020010151604001516118fb565b15612a0e578260ff168282815181106129fc57fe5b60200260200101516060015102840193505b6001016129a5565b50506001016128d3565b5080820383019250612a33846001612586565b5050506128bf565b600c54600254604051918302916001600160a01b039091169082156108fc029083906000818181858888f19350505050158015612a7c573d6000803e3d6000fd5b509450610cf19350505050565b6000612a9585856120a9565b8015612aa65750612aa683836120a9565b612ae15760405162461bcd60e51b815260040180806020018281038252602181526020018061331a6021913960400191505060405180910390fd5b612aeb8484610cdb565b80612afb5750612afb8286610cdb565b15612b0857506000612b0c565b5060015b949350505050565b6000612b2085856120a9565b8015612b315750612b3183836120a9565b612b82576040805162461bcd60e51b815260206004820152601f60248201527f496e74657276616c73206e6f742076616c69642028696e636c7564696e672900604482015290519081900360640190fd5b612b8c8584610cdb565b8015612b9d5750612b9d8483612054565b15612baa57506001612b0c565b506000949350505050565b600954606090600090640100000000900460ff16612bd4576000612bd7565b60015b60408051610200808252610220820190925260ff92909216925060208201818036833701905050915060005b6020811015610e185780601f0360080260020a60035481612c2057fe5b0460f81b838260000181518110612c3357fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a60045481612c5e57fe5b0460f81b838260200181518110612c7157fe5b60200101906001600160f81b031916908160001a9053506006546008601f8390030260020a9063ffffffff1681612ca457fe5b0460f81b838260400181518110612cb757fe5b60200101906001600160f81b031916908160001a905350600654601f82900360080260020a90640100000000900463ffffffff1681612cf257fe5b0460f81b838260600181518110612d0557fe5b60200101906001600160f81b031916908160001a905350600654601f82900360080260020a90600160401b900463ffffffff1681612d3f57fe5b0460f81b838260800181518110612d5257fe5b60200101906001600160f81b031916908160001a905350600654601f82900360080260020a90600160681b900463ffffffff1681612d8c57fe5b0460f81b838260a00181518110612d9f57fe5b60200101906001600160f81b031916908160001a905350600654601f82900360080260020a90600160601b900460ff1681612dd657fe5b0460f81b838260c00181518110612de957fe5b60200101906001600160f81b031916908160001a905350600654601f82900360080260020a90600160881b900460ff1681612e2057fe5b0460f81b838260e00181518110612e3357fe5b60200101906001600160f81b031916908160001a905350600654601f82900360080260020a90600160901b900460ff1681612e6a57fe5b0460f81b83826101000181518110612e7e57fe5b60200101906001600160f81b031916908160001a905350600654601f82900360080260020a90600160981b900460ff1681612eb557fe5b0460f81b83826101200181518110612ec957fe5b60200101906001600160f81b031916908160001a905350600954601f82900360080260020a9062010000900461ffff1681612f0057fe5b0460f81b83826101400181518110612f1457fe5b60200101906001600160f81b031916908160001a9053506009546008601f8390030260020a9061ffff1681612f4557fe5b0460f81b83826101600181518110612f5957fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8281612f8257fe5b0460f81b83826101800181518110612f9657fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a600a5481612fc157fe5b0460f81b83826101a00181518110612fd557fe5b60200101906001600160f81b031916908160001a905350600b546008601f8390030260020a9060ff168161300557fe5b0460f81b83826101c0018151811061301957fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a600c548161304457fe5b0460f81b83826101e0018151811061305857fe5b60200101906001600160f81b031916908160001a905350600101612c03565b6000806000806130868661311e565b925092509250600080600061309a8861311e565b925092509250828610156130b8576000199650505050505050610cf1565b8286141561310f57818510156130d8576000199650505050505050610cf1565b8185141561310f57808410156130f8576000199650505050505050610cf1565b8084141561310f5760009650505050505050610cf1565b50600198975050505050505050565b600080806120476201518085046131ec565b6131386132ff565b506040805180820190915281518152602082810190820152919050565b60608082600001518460000151016040519080825280601f01601f19166020018201604052801561318d576020820181803683370190505b50905060006020820190506131ab8186602001518760000151613282565b8451602085015185516131c19284019190613282565b509392505050565b6001546001600160a01b0316ff5b620151808102820182811015610cf157600080fd5b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f846050028161324357fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b5b602081106132a2578151835260209283019290910190601f1901613283565b905182516020929092036101000a6000190180199091169116179052565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60405180604001604052806000815260200160008152509056fe496e74657276616c73206e6f742076616c696420286f7665726c617070696e6729496e74657276616c206d75737420626520696e2072616e6765206f6620746865206167677265656d656e74546f74616c206e756d626572206f6620726f6f6d73206973206e6f7420656e6f75676841677265656d656e74206973206e6f7420726561636865642079657400000000526f6f6d7320776974682064657369726564206e756d626572206f66206265647320646f65736e27742065786973744f6e6c79206163636f6d6f646174696f6e20726570726573656e7461746976652063616e206578656375746520746869734f6e6c79206167656e637920726570726573656e7461746976652063616e20657865637574652074686973436f6e7472616374207769746820636c6175736521205769746864726177616c206f6620726f6f6d73206e6f7420706f737369626c652ea264697066735822122013e2992aa5afe9fa2b539d90e10b9df779af30d23b13134635dfbbe294b3122464736f6c63430006030033456e642064617465206d757374206265206166746572207374617274206461746521";

    public static final String FUNC__ACCOMODATIONAGREED = "_accomodationAgreed";

    public static final String FUNC__ACCOMODATIONREPR = "_accomodationRepr";

    public static final String FUNC__ADVANCEPAYMENT = "_advancePayment";

    public static final String FUNC__AGENCYAGREED = "_agencyAgreed";

    public static final String FUNC__AGENCYREPR = "_agencyRepr";

    public static final String FUNC__BADOFFSEASONMAXPENALTY = "_badOffSeasonMaxPenalty";

    public static final String FUNC__CLAUSE = "_clause";

    public static final String FUNC__COMMISION = "_commision";

    public static final String FUNC__COURTINCHARGE = "_courtInCharge";

    public static final String FUNC__ENDDATE = "_endDate";

    public static final String FUNC__FINEPERBED = "_finePerBed";

    public static final String FUNC__HOTELS = "_hotels";

    public static final String FUNC__INFORMINGPERIOD = "_informingPeriod";

    public static final String FUNC__KIDAGELIMIT = "_kidAgeLimit";

    public static final String FUNC__KIDPRICE = "_kidPrice";

    public static final String FUNC__LAW = "_law";

    public static final String FUNC__OFFSEASONMINIMUM = "_offSeasonMinimum";

    public static final String FUNC__PRICEFB = "_priceFB";

    public static final String FUNC__PRICEHB = "_priceHB";

    public static final String FUNC__PRICEOS = "_priceOS";

    public static final String FUNC__ROOMSBYBEDNUMBERS = "_roomsByBedNumbers";

    public static final String FUNC__SMALLKIDDISCOUNT = "_smallKidDiscount";

    public static final String FUNC__STARTDATE = "_startDate";

    public static final String FUNC__TOTALBEDS = "_totalBeds";

    public static final String FUNC__WITHDRAWALPERIOD = "_withdrawalPeriod";

    public static final String FUNC_ACCOMODATIONAGREED = "accomodationAgreed";

    public static final String FUNC_ADDDAYS2 = "addDays2";

    public static final String FUNC_AGENCYAGREED = "agencyAgreed";

    public static final String FUNC_BREAKCONTRACTACCOMODATION = "breakContractAccomodation";

    public static final String FUNC_BREAKCONTRACTAGENCY = "breakContractAgency";

    public static final String FUNC_CONTRACTBALANCE = "contractBalance";

    public static final String FUNC_DAYINRANGE = "dayInRange";

    public static final String FUNC_DELEGATEACCOMODATION = "delegateAccomodation";

    public static final String FUNC_DELEGATEAGENCY = "delegateAgency";

    public static final String FUNC_GETAA = "getAA";

    public static final String FUNC_GETALLRESASBYTES = "getAllResAsBytes";

    public static final String FUNC_GETCONTRACTINFOASBYTES = "getContractInfoAsBytes";

    public static final String FUNC_GETCOURTINFO = "getCourtInfo";

    public static final String FUNC_GETHOTELS = "getHotels";

    public static final String FUNC_GETRESASBYTES = "getResAsBytes";

    public static final String FUNC_GETROOMSINFO = "getRoomsInfo";

    public static final String FUNC_INCLUDING = "including";

    public static final String FUNC_ISAFTER = "isAfter";

    public static final String FUNC_ISAFTERORSAME = "isAfterOrSame";

    public static final String FUNC_ISBEFORE = "isBefore";

    public static final String FUNC_ISBEFOREORSAME = "isBeforeOrSame";

    public static final String FUNC_ISINRANGE = "isInRange";

    public static final String FUNC_ISSAME = "isSame";

    public static final String FUNC_OVERLAPPING = "overlapping";

    public static final String FUNC_RESERVE = "reserve";

    public static final String FUNC_TODATE = "toDate";

    public static final String FUNC_TRANSFERONE = "transferOne";

    public static final String FUNC_VERIFYROOMINGLIST = "verifyRoomingList";

    public static final String FUNC_WITHDRAWROOMS = "withdrawRooms";

    @Deprecated
    protected Allotment(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Allotment(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Allotment(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Allotment(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Boolean> _accomodationAgreed() {
        final Function function = new Function(FUNC__ACCOMODATIONAGREED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> _accomodationRepr() {
        final Function function = new Function(FUNC__ACCOMODATIONREPR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> _advancePayment() {
        final Function function = new Function(FUNC__ADVANCEPAYMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> _agencyAgreed() {
        final Function function = new Function(FUNC__AGENCYAGREED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> _agencyRepr() {
        final Function function = new Function(FUNC__AGENCYREPR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> _badOffSeasonMaxPenalty() {
        final Function function = new Function(FUNC__BADOFFSEASONMAXPENALTY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> _clause() {
        final Function function = new Function(FUNC__CLAUSE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> _commision() {
        final Function function = new Function(FUNC__COMMISION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<String, String>> _courtInCharge() {
        final Function function = new Function(FUNC__COURTINCHARGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> _endDate() {
        final Function function = new Function(FUNC__ENDDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _finePerBed() {
        final Function function = new Function(FUNC__FINEPERBED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _hotels(BigInteger param0) {
        final Function function = new Function(FUNC__HOTELS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _informingPeriod() {
        final Function function = new Function(FUNC__INFORMINGPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _kidAgeLimit() {
        final Function function = new Function(FUNC__KIDAGELIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _kidPrice() {
        final Function function = new Function(FUNC__KIDPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> _law() {
        final Function function = new Function(FUNC__LAW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> _offSeasonMinimum() {
        final Function function = new Function(FUNC__OFFSEASONMINIMUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _priceFB() {
        final Function function = new Function(FUNC__PRICEFB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _priceHB() {
        final Function function = new Function(FUNC__PRICEHB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _priceOS() {
        final Function function = new Function(FUNC__PRICEOS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _roomsByBedNumbers(BigInteger param0) {
        final Function function = new Function(FUNC__ROOMSBYBEDNUMBERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _smallKidDiscount() {
        final Function function = new Function(FUNC__SMALLKIDDISCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _startDate() {
        final Function function = new Function(FUNC__STARTDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _totalBeds() {
        final Function function = new Function(FUNC__TOTALBEDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _withdrawalPeriod() {
        final Function function = new Function(FUNC__WITHDRAWALPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> accomodationAgreed() {
        final Function function = new Function(
                FUNC_ACCOMODATIONAGREED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> addDays2(BigInteger timestamp, BigInteger daysToAdd) {
        final Function function = new Function(FUNC_ADDDAYS2, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp), 
                new org.web3j.abi.datatypes.generated.Uint256(daysToAdd)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> agencyAgreed() {
        final Function function = new Function(
                FUNC_AGENCYAGREED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> breakContractAccomodation() {
        final Function function = new Function(
                FUNC_BREAKCONTRACTACCOMODATION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> breakContractAgency() {
        final Function function = new Function(
                FUNC_BREAKCONTRACTAGENCY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> contractBalance() {
        final Function function = new Function(FUNC_CONTRACTBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> dayInRange(BigInteger checkDate, BigInteger startRange, BigInteger endRange) {
        final Function function = new Function(FUNC_DAYINRANGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(checkDate), 
                new org.web3j.abi.datatypes.generated.Uint256(startRange), 
                new org.web3j.abi.datatypes.generated.Uint256(endRange)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> delegateAccomodation(String newRepresentative) {
        final Function function = new Function(
                FUNC_DELEGATEACCOMODATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newRepresentative)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> delegateAgency(String newRepresentative) {
        final Function function = new Function(
                FUNC_DELEGATEAGENCY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newRepresentative)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getAA(BigInteger beds) {
        final Function function = new Function(FUNC_GETAA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(beds)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> getAllResAsBytes() {
        final Function function = new Function(FUNC_GETALLRESASBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> getContractInfoAsBytes() {
        final Function function = new Function(FUNC_GETCONTRACTINFOASBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getCourtInfo() {
        final Function function = new Function(FUNC_GETCOURTINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getHotels() {
        final Function function = new Function(FUNC_GETHOTELS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getResAsBytes(BigInteger beds) {
        final Function function = new Function(FUNC_GETRESASBYTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(beds)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> getRoomsInfo() {
        final Function function = new Function(FUNC_GETROOMSINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> including(BigInteger from1, BigInteger to1, BigInteger from2, BigInteger to2) {
        final Function function = new Function(FUNC_INCLUDING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(from1), 
                new org.web3j.abi.datatypes.generated.Uint256(to1), 
                new org.web3j.abi.datatypes.generated.Uint256(from2), 
                new org.web3j.abi.datatypes.generated.Uint256(to2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isAfter(BigInteger timestamp1, BigInteger timestamp2) {
        final Function function = new Function(FUNC_ISAFTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isAfterOrSame(BigInteger timestamp1, BigInteger timestamp2) {
        final Function function = new Function(FUNC_ISAFTERORSAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isBefore(BigInteger timestamp1, BigInteger timestamp2) {
        final Function function = new Function(FUNC_ISBEFORE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isBeforeOrSame(BigInteger timestamp1, BigInteger timestamp2) {
        final Function function = new Function(FUNC_ISBEFOREORSAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isInRange(BigInteger checkDate, BigInteger daysFromToday) {
        final Function function = new Function(FUNC_ISINRANGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(checkDate), 
                new org.web3j.abi.datatypes.generated.Uint256(daysFromToday)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isSame(BigInteger timestamp1, BigInteger timestamp2) {
        final Function function = new Function(FUNC_ISSAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> overlapping(BigInteger from1, BigInteger to1, BigInteger from2, BigInteger to2) {
        final Function function = new Function(FUNC_OVERLAPPING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(from1), 
                new org.web3j.abi.datatypes.generated.Uint256(to1), 
                new org.web3j.abi.datatypes.generated.Uint256(from2), 
                new org.web3j.abi.datatypes.generated.Uint256(to2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> reserve(List<BigInteger> reservation) {
        final Function function = new Function(
                FUNC_RESERVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray5<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(reservation, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> toDate(BigInteger timestamp) {
        final Function function = new Function(FUNC_TODATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transferOne() {
        final Function function = new Function(
                FUNC_TRANSFERONE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawRooms(BigInteger startDate, BigInteger endDate) {
        final Function function = new Function(
                FUNC_WITHDRAWROOMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Allotment load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Allotment(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Allotment load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Allotment(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Allotment load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Allotment(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Allotment load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Allotment(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Allotment> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Allotment> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Allotment> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Allotment> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.datatypes.generated.Uint8.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
