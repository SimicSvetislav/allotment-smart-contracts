package rs.ac.uns.ftn.informatics.legal_tech.allotment.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.15.
 */
@SuppressWarnings("rawtypes")
public class Allotment extends Contract {
    public static final String BINARY = "60806040526004805461ffff191690556012805460ff191690556000601a553480156200002b57600080fd5b506040516200502a3803806200502a83398181016040526103008110156200005257600080fd5b81516020830151604080850151606086015160808701805193519597949692959194919392820192846401000000008211156200008e57600080fd5b908301906020820185811115620000a457600080fd5b8251866020820283011164010000000082111715620000c257600080fd5b82525081516020918201928201910280838360005b83811015620000f1578181015183820152602001620000d7565b5050505090500160405260200191908260800191908260c001805160405193929190846401000000008211156200012757600080fd5b9083019060208201858111156200013d57600080fd5b82518660208202830111640100000000821117156200015b57600080fd5b82525081516020918201928201910280838360005b838110156200018a57818101518382015260200162000170565b505050509190910160408190526060830151608084015160a085015160c086015160e08701805160209098019994989397929650909493929184640100000000821115620001d757600080fd5b908301906020820185811115620001ed57600080fd5b82516401000000008111828201881017156200020857600080fd5b82525081516020918201929091019080838360005b83811015620002375781810151838201526020016200021d565b50505050905090810190601f168015620002655780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200028957600080fd5b9083019060208201858111156200029f57600080fd5b8251640100000000811182820188101715620002ba57600080fd5b82525081516020918201929091019080838360005b83811015620002e9578181015183820152602001620002cf565b50505050905090810190601f168015620003175780820380516001836020036101000a031916815260200191505b506040525050508e6000806101000a8154816001600160a01b0302191690836001600160a01b031602179055508d600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200037d8c8e6200078760201b60201c565b620003ba5760405162461bcd60e51b815260040180806020018281038252602181526020018062004fe76021913960400191505060405180910390fd5b60058d905560068c90558a51620003d99060079060208e019062000996565b5060208a01518a5163ffffffff918216911611156200042a5760405162461bcd60e51b815260040180806020018281038252603681526020018062004fb16036913960400191505060405180910390fd5b89516008805460208d015160408e015163ffffffff90811668010000000000000000029181166401000000000263ffffffff1990931694169390931763ffffffff60201b19161763ffffffff60401b19169190911790558851601211620004c35760405162461bcd60e51b8152600401808060200182810382526022815260200180620050086022913960400191505060405180910390fd5b88516008805460608d81015160208e015160408f0151928f015160ff908116600160981b02938116600160901b02918116600160881b0263ffffffff9093166d01000000000000000000000000000296166c010000000000000000000000000260ff60601b199094169390931763ffffffff60681b19169490941760ff60881b19169390931760ff60901b19161760ff60981b1916919091179055608089015160185560a0890151601955875188906000906200057c57fe5b6020908102919091010151600955600060015b89518110156200067657898181518110620005a657fe5b6020026020010151600a60008360ff1660ff16815260200190815260200160002081905550808a8281518110620005d957fe5b6020026020010151028201915060008a8281518110620005f557fe5b60200260200101511115620006585760168054600181018255600091909152602081047fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428901805460ff808516601f9094166101000a938402930219169190911790555b6200066e8160016001600160e01b03620007ad16565b90506200058f565b5080896000815181106200068657fe5b602002602001015114620006cc5760405162461bcd60e51b815260040180806020018281038252602a81526020018062004f87602a913960400191505060405180910390fd5b8751600b80546020808c015161ffff1990921661ffff9485161763ffff000019166201000094909216939093021760ff60201b19166401000000008a151502179055600c879055600d805460ff191660ff8816179055600e85905583516200073b91600f9190860190620009e6565b50815162000751906010906020850190620009e6565b50506015805460ff19169055505060006017819055600281905560038190556014555062000a789b505050505050505050505050565b60006200079e83836001600160e01b036200080f16565b60000b60011490505b92915050565b60008282018381101562000808576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600080808062000828866001600160e01b03620008d516565b919450925090506000808062000847886001600160e01b03620008d516565b9250925092508286101562000867576000199650505050505050620007a7565b82861415620008c657818510156200088a576000199650505050505050620007a7565b81851415620008c65780841015620008ad576000199650505050505050620007a7565b80841415620008c65760009650505050505050620007a7565b50600198975050505050505050565b60008080620008f26201518085046001600160e01b03620008ff16565b9196909550909350915050565b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f84605002816200095757fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b828054828255906000526020600020908101928215620009d4579160200282015b82811115620009d4578251825591602001919060010190620009b7565b50620009e292915062000a58565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a2957805160ff1916838001178555620009d4565b82800160010185558215620009d45791820182811115620009d4578251825591602001919060010190620009b7565b62000a7591905b80821115620009e2576000815560010162000a5f565b90565b6144ff8062000a886000396000f3fe60806040526004361061037a5760003560e01c8063a4c98a42116101d1578063cd50c24511610102578063dfa5d6d3116100a0578063f7d003801161006f578063f7d0038014610c4d578063fbf4607714610c77578063fd97cad314610cb3578063ffe3203c14610cd057610381565b8063dfa5d6d314610b9c578063e1bcfac814610bb1578063e66a07b114610be1578063e925df5c14610c1157610381565b8063d5735cc7116100dc578063d5735cc714610b2d578063d6c3d0ee14610b42578063dbfa586314610b57578063df662aad14610b6c57610381565b8063cd50c24514610ad3578063d17f56d714610b03578063d3db619714610b1857610381565b8063bbd520071161016f578063c849f2af11610149578063c849f2af14610a71578063c89d7f1814610a86578063c91f9d6f14610a9b578063ca48a1d814610abe57610381565b8063bbd5200714610a32578063c5b69dd314610a47578063c7f1911b14610a5c57610381565b8063a6eb00c4116101ab578063a6eb00c4146109c9578063a9af12f6146109de578063ac8daba014610a08578063ba245fe514610a1d57610381565b8063a4c98a4214610954578063a521df9f14610984578063a5e2c6421461099957610381565b806368aaa4f5116102ab5780638b7afe2e1161024957806397d3c35e1161022357806397d3c35e146108af5780639b54be26146108c45780639ccb6b26146108f7578063a11e22d91461090c57610381565b80638b7afe2e146108435780638d263eaf146108585780638ebcccc81461088257610381565b80637a77724c116102855780637a77724c146107895780637c01d962146107ba5780637d11af031461081957806388b5bab81461082e57610381565b806368aaa4f51461070e5780636a2fea33146107235780636abeb25e1461075957610381565b80632f78d0cd116103185780635aa756b5116102f25780635aa756b5146105b55780635e0cda94146105ca5780635e413daf146106bd5780635ec65857146106f957610381565b80632f78d0cd1461055f57806344c1fb4b1461057457806345d6dce21461058957610381565b806316480e0f1161035457806316480e0f146104385780631fc189d8146104635780632cc9caf3146104a75780632ed536c51461053157610381565b8063023a051e14610383578063055434d7146103b65780630d2e677a146103d357610381565b3661038157005b005b34801561038f57600080fd5b50610381600480360360208110156103a657600080fd5b50356001600160a01b0316610ce5565b610381600480360360208110156103cc57600080fd5b5035610d50565b3480156103df57600080fd5b506103e8610e5a565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561042457818101518382015260200161040c565b505050509050019250505060405180910390f35b34801561044457600080fd5b5061044d610eb2565b6040805160ff9092168252519081900360200190f35b34801561046f57600080fd5b506104936004803603604081101561048657600080fd5b5080359060200135610ec2565b604080519115158252519081900360200190f35b3480156104b357600080fd5b506104bc610ede565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104f65781810151838201526020016104de565b50505050905090810190601f1680156105235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561053d57600080fd5b50610546611004565b6040805163ffffffff9092168252519081900360200190f35b34801561056b57600080fd5b50610546611017565b34801561058057600080fd5b5061049361102b565b34801561059557600080fd5b5061059e61103c565b6040805161ffff9092168252519081900360200190f35b3480156105c157600080fd5b5061044d611046565b3480156105d657600080fd5b506105df611056565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610620578181015183820152602001610608565b50505050905090810190601f16801561064d5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610680578181015183820152602001610668565b50505050905090810190601f1680156106ad5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156106c957600080fd5b506106e7600480360360208110156106e057600080fd5b5035611186565b60408051918252519081900360200190f35b34801561070557600080fd5b506106e76111a4565b34801561071a57600080fd5b506104bc611325565b34801561072f57600080fd5b506104936004803603606081101561074657600080fd5b508035906020810135906040013561183e565b34801561076557600080fd5b506104936004803603604081101561077c57600080fd5b5080359060200135611873565b34801561079557600080fd5b5061079e61188d565b604080516001600160a01b039092168252519081900360200190f35b3480156107c657600080fd5b506106e7600480360360c08110156107dd57600080fd5b810190808060c00190600680602002604051908101604052809291908260066020028082843760009201919091525091945061189c9350505050565b34801561082557600080fd5b50610493611e0c565b34801561083a57600080fd5b5061044d611e1a565b34801561084f57600080fd5b506106e7611e2a565b34801561086457600080fd5b506104bc6004803603602081101561087b57600080fd5b5035611e2e565b34801561088e57600080fd5b506106e7600480360360208110156108a557600080fd5b503560ff16612300565b3480156108bb57600080fd5b506106e7612312565b3480156108d057600080fd5b50610381600480360360208110156108e757600080fd5b50356001600160a01b0316612318565b34801561090357600080fd5b50610546612383565b34801561091857600080fd5b506109366004803603602081101561092f57600080fd5b503561238f565b60408051938452602084019290925282820152519081900360600190f35b34801561096057600080fd5b506104936004803603604081101561097757600080fd5b50803590602001356123aa565b34801561099057600080fd5b506104bc6123c6565b3480156109a557600080fd5b50610493600480360360408110156109bc57600080fd5b50803590602001356123ff565b3480156109d557600080fd5b5061038161241a565b3480156109ea57600080fd5b506106e760048036036020811015610a0157600080fd5b50356124a9565b348015610a1457600080fd5b506106e7612574565b348015610a2957600080fd5b506104bc61257a565b348015610a3e57600080fd5b506106e76126a1565b348015610a5357600080fd5b506104bc6126a7565b348015610a6857600080fd5b506103816127f6565b348015610a7d57600080fd5b50610493612912565b348015610a9257600080fd5b5061059e61291b565b61038160048036036040811015610ab157600080fd5b508035906020013561292b565b348015610aca57600080fd5b5061044d612af5565b348015610adf57600080fd5b5061049360048036036040811015610af657600080fd5b5080359060200135612b05565b348015610b0f57600080fd5b506106e7612b1c565b348015610b2457600080fd5b5061044d612b22565b348015610b3957600080fd5b50610546612b2b565b348015610b4e57600080fd5b5061079e612b3e565b348015610b6357600080fd5b506106e7612b4d565b348015610b7857600080fd5b5061049360048036036040811015610b8f57600080fd5b5080359060200135612b53565b348015610ba857600080fd5b50610381612b7b565b348015610bbd57600080fd5b506106e760048036036040811015610bd457600080fd5b5080359060200135612c26565b348015610bed57600080fd5b506106e760048036036040811015610c0457600080fd5b5080359060200135612c32565b348015610c1d57600080fd5b5061049360048036036080811015610c3457600080fd5b50803590602081013590604081013590606001356131a1565b348015610c5957600080fd5b506106e760048036036020811015610c7057600080fd5b503561322c565b348015610c8357600080fd5b5061049360048036036080811015610c9a57600080fd5b50803590602081013590604081013590606001356133a7565b61038160048036036020811015610cc957600080fd5b5035613448565b348015610cdc57600080fd5b506104bc613558565b6000546001600160a01b03163314610d2e5760405162461bcd60e51b815260040180806020018281038252602b815260200180614474602b913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d995760405162461bcd60e51b815260040180806020018281038252602b815260200180614474602b913960400191505060405180910390fd5b60045460ff16610e125760045460ff61010090910416151560011415610dfb57600154600c546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610df5573d6000803e3d6000fd5b50426014555b6004805460ff191660011790556002819055610e57565b6040805162461bcd60e51b81526020600482015260156024820152741059d95b98de48185b1c9958591e481859dc995959605a1b604482015290519081900360640190fd5b50565b60606007805480602002602001604051908101604052809291908181526020018280548015610ea857602002820191906000526020600020905b815481526020019060010190808311610e94575b5050505050905090565b600854600160901b900460ff1681565b6000610ece8383613bb6565b60000b6001141590505b92915050565b60165460408051918102808352601f19601f82011683016020018252606092908015610f11576020820181803683370190505b50915060005b601654811015610fff57600060168281548110610f3057fe5b600091825260208083208183040154601f9092166101000a90910460ff16808352600a9091526040822054909250905b6020811015610ff15780601f0360080260020a8360ff1681610f7e57fe5b0460f81b86828688020181518110610f9257fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8281610fbb57fe5b0460f81b86828688020160200181518110610fd257fe5b60200101906001600160f81b031916908160001a905350600101610f60565b505050806001019050610f17565b505090565b600854600160681b900463ffffffff1681565b600854640100000000900463ffffffff1681565b600b54640100000000900460ff1681565b600b5461ffff1681565b600854600160881b900460ff1681565b600f8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281529183918301828280156110de5780601f106110b3576101008083540402835291602001916110de565b820191906000526020600020905b8154815290600101906020018083116110c157829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561117c5780601f106111515761010080835404028352916020019161117c565b820191906000526020600020905b81548152906001019060200180831161115f57829003601f168201915b5050505050905082565b6007818154811061119357fe5b600091825260209091200154905081565b60125460009060ff16156111f4576040805162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c995cdd1c9a58dd195960721b604482015290519081900360640190fd5b61120042601954611873565b15611252576040805162461bcd60e51b815260206004820152601960248201527f4d61696e20736561736f6e20616c726561647920656e64656400000000000000604482015290519081900360640190fd5b6000611262600554601854613c5d565b9050600061127260095483613c78565b6005549091506000905b61128881601854612b05565b6112c35760006112978261322c565b90506112ae836112a960095484613cd1565b613d13565b92506112bb826001613d6d565b91505061127c565b61271060006112e46112d58584613c78565b6112df8785613c78565b613d82565b60085490915060009061130290600160901b900460ff166064613c78565b90508082101561131a576012805460ff191660011790555b509550505050505090565b60606000610140905060175481026040519080825280601f01601f19166020018201604052801561135d576020820181803683370190505b5091506000805b60165460ff8216101561183857600060168260ff168154811061138357fe5b600091825260208083208183040154601f9092166101000a90910460ff16808352601182526040808420805482518186028101860190935280835292955060609491939092919084015b8282101561146157600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460ff808216151560c08601526101009182900416151560e08501526007909101549083015290835290920191016113cd565b509293506000925050505b815181101561182657600082828151811061148357fe5b602002602001015160c0015161149a57600061149d565b60015b60ff16905060008383815181106114b057fe5b602002602001015160e001516114c75760006114ca565b60015b60ff16905060005b602081101561181b5780601f0360080260020a8585815181106114f157fe5b6020026020010151600001518161150457fe5b0460f81b8a8983878d0201018151811061151a57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a85858151811061154757fe5b6020026020010151602001518161155a57fe5b0460f81b8a8983878d0201602001018151811061157357fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8585815181106115a057fe5b602002602001015160400151816115b357fe5b0460f81b8a8983878d020160400101815181106115cc57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8585815181106115f957fe5b6020026020010151606001518161160c57fe5b0460f81b8a8983878d0201606001018151811061162557fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a85858151811061165257fe5b6020026020010151608001518161166557fe5b0460f81b8a8983878d0201608001018151811061167e57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8585815181106116ab57fe5b602002602001015160a00151816116be57fe5b0460f81b8a8983878d020160a00101815181106116d757fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a838161170057fe5b0460f81b8a8983878d020160c001018151811061171957fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8660ff168161174557fe5b0460f81b8a8983878d020160e001018151811061175e57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a828161178757fe5b0460f81b8a8983878d02016101000101815181106117a157fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8585815181106117ce57fe5b60200260200101516101000151816117e257fe5b0460f81b8a8983878d02016101200101815181106117fc57fe5b60200101906001600160f81b031916908160001a9053506001016114d2565b50505060010161146c565b50518402929092019150600101611364565b50505090565b600061184a84846123aa565b801561185b575061185b8483610ec2565b156118685750600161186c565b5060005b9392505050565b600061187f8383613bb6565b60000b600114905092915050565b6001546001600160a01b031681565b600080546001600160a01b031633146118e65760405162461bcd60e51b815260040180806020018281038252602b815260200180614474602b913960400191505060405180910390fd5b60045460ff1680156118ff5750600454610100900460ff165b61193e576040805162461bcd60e51b815260206004820152601c602482015260008051602061439a833981519152604482015290519081900360640190fd5b60005b6006811015611e0657600083826006811061195857fe5b6020020151905060008461196d846001613d13565b6006811061197757fe5b6020020151905061198e60055460065484846133a7565b6119c95760405162461bcd60e51b815260040180806020018281038252602b81526020018061434c602b913960400191505060405180910390fd5b6000805b601354811015611a4d576000601386815481106119e657fe5b9060005260206000209060020201600001549050600060138781548110611a0957fe5b9060005260206000209060020201600101549050611a29828288886131a1565b15611a3957600193505050611a4d565b5050611a46816001613d13565b90506119cd565b508015611aa1576040805162461bcd60e51b815260206004820152601960248201527f536f6d6520646174657320617265207769746864726177656400000000000000604482015290519081900360640190fd5b600086611aaf866002613d13565b60068110611ab957fe5b60200201519050600087611ace876003613d13565b60068110611ad857fe5b60200201519050600088611aed886004613d13565b60068110611af757fe5b602002015190508060011480611b0d5750806002145b611b485760405162461bcd60e51b815260040180806020018281038252602e8152602001806142fd602e913960400191505060405180910390fd5b611b5483838888613dc4565b611b9b576040805162461bcd60e51b8152602060048201526013602482015272526f6f6d73206e6f7420617661696c61626c6560681b604482015290519081900360640190fd5b6000611bad87876018546019546131a1565b611bb8576000611bbb565b60015b90506000808215611c4d578360011415611be157505060085463ffffffff166001611c48565b8360021415611c04575050600854640100000000900463ffffffff166002611c48565b6040805162461bcd60e51b8152602060048201526014602482015273141c9a58d9481d1e5c19481b9bdd081d985b1a5960621b604482015290519081900360640190fd5b611c62565b5050600854600160401b900463ffffffff1660035b60008c611c708c6005613d13565b60068110611c7a57fe5b60200201519050611c8b8787613c78565b811115611cc95760405162461bcd60e51b815260040180806020018281038252602b81526020018061449f602b913960400191505060405180910390fd5b611d078c6112a9611cec611ce6611ce08c8c613c78565b86613cd1565b87613c78565b6008546112a9908690600160681b900463ffffffff16613c78565b9b50611d166017546001613d13565b601755611d21614292565b506040805161012081018252601754815260208082019c8d528183019b8c5260608201988952608082018f815260a08301958652600060c0840181815298151560e085019081526101008086019788529c82526011845294812080546001808201835591835293909120935160089093029093019182559c5191810191909155995160028b0155955160038a015598516004890155516005880155505160068087018054945160ff19959095169215159290921761ff0019169315159094029290921790915550925160079092019190915550611dff908290613d13565b9050611941565b50919050565b600454610100900460ff1681565b600854600160601b900460ff1681565b4790565b60008181526011602090815260408083208054825181850281018501909352808352606094859484015b82821015611eec57600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460ff808216151560c08601526101009182900416151560e0850152600790910154908301529083529092019101611e58565b50505050905060006101409050815181026040519080825280601f01601f191660200182016040528015611f27576020820181803683370190505b50925060005b82518110156122f8576000838281518110611f4457fe5b60200260200101516000015190506000848381518110611f6057fe5b60200260200101516020015190506000858481518110611f7c57fe5b60200260200101516040015190506000868581518110611f9857fe5b60200260200101516060015190506000878681518110611fb457fe5b60200260200101516080015190506000888781518110611fd057fe5b602002602001015160a0015190506000898881518110611fec57fe5b602002602001015160c00151612003576000612006565b60015b60ff16905060008a898151811061201957fe5b602002602001015160e00151612030576000612033565b60015b60ff16905060005b60208110156122e35780601f0360080260020a898161205657fe5b0460f81b8d828c8e02018151811061206a57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a888161209357fe5b0460f81b8d828c8e0201602001815181106120aa57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a87816120d357fe5b0460f81b8d828c8e0201604001815181106120ea57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a868161211357fe5b0460f81b8d828c8e02016060018151811061212a57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a858161215357fe5b0460f81b8d828c8e02016080018151811061216a57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a848161219357fe5b0460f81b8d828c8e020160a001815181106121aa57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a83816121d357fe5b0460f81b8d828c8e020160c001815181106121ea57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8e8161221357fe5b0460f81b8d828c8e020160e0018151811061222a57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a828161225357fe5b0460f81b8d828c8e0201610100018151811061226b57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a8c8b8151811061229857fe5b60200260200101516101000151816122ac57fe5b0460f81b8d828c8e020161012001815181106122c457fe5b60200101906001600160f81b031916908160001a90535060010161203b565b505060019097019650611f2d95505050505050565b505050919050565b600a6020526000908152604090205481565b600c5481565b6001546001600160a01b031633146123615760405162461bcd60e51b81526004018080602001828103825260318152602001806144436031913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60085463ffffffff1681565b600080600061239d84614009565b9196909550909350915050565b60006123b68383613bb6565b60000b6000191415905092915050565b6040518060400160405280601d81526020017f5a616b6f6e206f206f626c69676163696f6e696d206f646e6f73696d6100000081525081565b600061240b8383613bb6565b60000b60001914905092915050565b6001471015612470576040805162461bcd60e51b815260206004820152601960248201527f5468657265206973206e6f7420656e6f75676820657468657200000000000000604482015290519081900360640190fd5b6001546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610e57573d6000803e3d6000fd5b60008181526011602090815260408083208054825181850281018501909352808352606093859084015b8282101561256757600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460ff808216151560c08601526101009182900416151560e08501526007909101549083015290835290920191016124d3565b5050915195945050505050565b60055481565b60135460408051818302808252601f19601f8201168201602001835260609392919080156125af576020820181803683370190505b50925060005b82811015611838576000601382815481106125cc57fe5b90600052602060002090600202016000015490506000601383815481106125ef57fe5b6000918252602082206001600290920201015491505b60208110156126935780601f0360080260020a838161262057fe5b0460f81b8782868802018151811061263457fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a828161265d57fe5b0460f81b8782868802016020018151811061267457fe5b60200101906001600160f81b031916908160001a905350600101612605565b5050508060010190506125b5565b600e5481565b606080604051806040016040528060018152602001600160fe1b8152509050606061277f612771600f6000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127675780601f1061273c57610100808354040283529160200191612767565b820191906000526020600020905b81548152906001019060200180831161274a57829003601f168201915b505050505061401b565b61277a8461401b565b614040565b90506127ef61278d8261401b565b60108054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815261277a93909290918301828280156127675780601f1061273c57610100808354040283529160200191612767565b9250505090565b6000546001600160a01b0316331461283f5760405162461bcd60e51b815260040180806020018281038252602b815260200180614474602b913960400191505060405180910390fd5b60045460ff1680156128585750600454610100900460ff165b612897576040805162461bcd60e51b815260206004820152601c602482015260008051602061439a833981519152604482015290519081900360640190fd5b601454600b546000916128b39162010000900461ffff16613d6d565b90506128bf81426123aa565b1561290a57600e5460095460015460405191909202916001600160a01b03169082156108fc029083906000818181858888f19350505050158015612907573d6000803e3d6000fd5b50505b610e576140b4565b60045460ff1681565b600b5462010000900461ffff1681565b6000546001600160a01b031633146129745760405162461bcd60e51b815260040180806020018281038252602b815260200180614474602b913960400191505060405180910390fd5b60045460ff16801561298d5750600454610100900460ff165b6129cc576040805162461bcd60e51b815260206004820152601c602482015260008051602061439a833981519152604482015290519081900360640190fd5b60005b600083815260116020526040902054811015612af05760008381526011602052604090208054829081106129ff57fe5b906000526020600020906008020160000154821415612ade5760008381526011602052604081208054612a6091612a599185908110612a3a57fe5b6000918252602090912060046008909202010154600d5460ff16613c78565b6064613d82565b6001546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015612a9b573d6000803e3d6000fd5b50600084815260116020526040902080546001919084908110612aba57fe5b60009182526020909120600890910201600601805460ff1916911515919091179055505b612ae9816001613d13565b90506129cf565b505050565b600854600160981b900460ff1681565b6000612b118383613bb6565b60000b159392505050565b60095481565b600d5460ff1681565b600854600160401b900463ffffffff1681565b6000546001600160a01b031681565b60065481565b600080612b604284613d6d565b9050612b6c8482611873565b15611868576001915050610ed8565b6000546001600160a01b03163314612bc45760405162461bcd60e51b815260040180806020018281038252602b815260200180614474602b913960400191505060405180910390fd5b60045460ff168015612bdd5750600454610100900460ff165b612c1c576040805162461bcd60e51b815260206004820152601c602482015260008051602061439a833981519152604482015290519081900360640190fd5b612c246140b4565b565b600061186c8383613d6d565b600080546001600160a01b03163314612c7c5760405162461bcd60e51b815260040180806020018281038252602b815260200180614474602b913960400191505060405180910390fd5b60045460ff168015612c955750600454610100900460ff165b612cd4576040805162461bcd60e51b815260206004820152601c602482015260008051602061439a833981519152604482015290519081900360640190fd5b600b54640100000000900460ff1615612d1e5760405162461bcd60e51b81526004018080602001828103825260398152602001806143ba6039913960400191505060405180910390fd5b612d2883836123ff565b612d70576040805162461bcd60e51b815260206004820152601460248201527311185d19481c985b99d9481b9bdd081d985b1a5960621b604482015290519081900360640190fd5b612d7c836005546123aa565b612dcd576040805162461bcd60e51b815260206004820152601760248201527f53746172742064617465206f7574206f662072616e6765000000000000000000604482015290519081900360640190fd5b612dd982600654610ec2565b612e22576040805162461bcd60e51b8152602060048201526015602482015274456e642064617465206f7574206f662072616e676560581b604482015290519081900360640190fd5b600b54600090612e3790859061ffff16612b53565b90508015612ec957612e476142e2565b5050604080518082019091528381526020810183815260138054600181018255600091825292517f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09060029094029384015590517f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a091909201919091559050610ed8565b612ed16142e2565b50604080518082019091528481526020810184815260138054600181018255600091825283517f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09060029092029182015591517f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0919092019190915585905b612f588287612b05565b61314b57600080805b601654811161312657600060168281548110612f7957fe5b600091825260208083208183040154601f9092166101000a90910460ff16808352600a909152604090912054909150612fb29082613c78565b840193506060601160008360ff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561308257600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460ff808216151560c08601526101009182900416151560e0850152600790910154908301529083529092019101612fee565b509293506000925050505b8151811015613111576130cf888383815181106130a657fe5b6020026020010151602001518484815181106130be57fe5b60200260200101516040015161183e565b156130ff576130fc856112a98484815181106130e757fe5b6020026020010151606001518660ff16613c78565b94505b61310a816001613d13565b905061308d565b50505061311f816001613d13565b9050612f61565b50613135836112a98484613cd1565b9250613142846001612c26565b93505050612f4e565b600061315982600e54613c78565b6001546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015613194573d6000803e3d6000fd5b509450610ed89350505050565b60006131ad85856123ff565b80156131be57506131be83836123ff565b6131f95760405162461bcd60e51b815260040180806020018281038252602181526020018061432b6021913960400191505060405180910390fd5b6132038484610ec2565b8061321357506132138286610ec2565b1561322057506000613224565b5060015b949350505050565b600080805b6016548110156133a05760006016828154811061324a57fe5b600091825260208083208183040154601f9092166101000a90910460ff16808352601182526040808420805482518186028101860190935280835292955060609491939092919084015b8282101561332857600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460ff808216151560c08601526101009182900416151560e0850152600790910154908301529083529092019101613294565b509293506000925050505b815181101561338b5761334c878383815181106130a657fe5b1561337957613376856112a984848151811061336457fe5b60200260200101516060015186613c78565b94505b613384816001613d13565b9050613333565b505050613399816001613d13565b9050613231565b5092915050565b60006133b385856123ff565b80156133c457506133c483836123ff565b613415576040805162461bcd60e51b815260206004820152601f60248201527f496e74657276616c73206e6f742076616c69642028696e636c7564696e672900604482015290519081900360640190fd5b61341f8584610ec2565b8015613430575061343084836123aa565b1561343d57506001613224565b506000949350505050565b6001546001600160a01b031633146134915760405162461bcd60e51b81526004018080602001828103825260318152602001806144436031913960400191505060405180910390fd5b600454610100900460ff1661350b5760045460ff161515600114156134f257600154600c546040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156134ec573d6000803e3d6000fd5b50426014555b6004805461ff0019166101001790556003819055610e57565b6040805162461bcd60e51b815260206004820152601b60248201527f4163636f6d6f646174696f6e20616c7265616479206167726565640000000000604482015290519081900360640190fd5b600b54606090600090640100000000900460ff1661357757600061357a565b60015b604080516102c08082526102e0820190925260ff92909216925060208201818036833701905050915060005b6020811015610fff5780601f0360080260020a600554816135c357fe5b0460f81b8382600001815181106135d657fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a6006548161360157fe5b0460f81b83826020018151811061361457fe5b60200101906001600160f81b031916908160001a90535060088054601f83900390910260020a9063ffffffff168161364857fe5b0460f81b83826040018151811061365b57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a600860049054906101000a900463ffffffff1663ffffffff168161369c57fe5b0460f81b8382606001815181106136af57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a6008809054906101000a900463ffffffff1663ffffffff16816136ef57fe5b0460f81b83826080018151811061370257fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a6008600d9054906101000a900463ffffffff1663ffffffff168161374357fe5b0460f81b838260a0018151811061375657fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a6008600c9054906101000a900460ff1660ff168161379157fe5b0460f81b838260c001815181106137a457fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a600860119054906101000a900460ff1660ff16816137df57fe5b0460f81b838260e001815181106137f257fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a600860129054906101000a900460ff1660ff168161382d57fe5b0460f81b8382610100018151811061384157fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a600860139054906101000a900460ff1660ff168161387c57fe5b0460f81b8382610120018151811061389057fe5b60200101906001600160f81b031916908160001a905350600b54601f82900360080260020a9062010000900461ffff16816138c757fe5b0460f81b838261014001815181106138db57fe5b60200101906001600160f81b031916908160001a905350600b546008601f8390030260020a9061ffff168161390c57fe5b0460f81b8382610160018151811061392057fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a828161394957fe5b0460f81b8382610180018151811061395d57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a600c548161398857fe5b0460f81b83826101a0018151811061399c57fe5b60200101906001600160f81b031916908160001a905350600d546008601f8390030260020a9060ff16816139cc57fe5b0460f81b83826101c001815181106139e057fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a600e5481613a0b57fe5b0460f81b83826101e00181518110613a1f57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a4781613a4857fe5b0460f81b83826102000181518110613a5c57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a60145481613a8757fe5b0460f81b83826102200181518110613a9b57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a60025481613ac657fe5b0460f81b83826102400181518110613ada57fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a60035481613b0557fe5b0460f81b83826102600181518110613b1957fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a60185481613b4457fe5b0460f81b83826102800181518110613b5857fe5b60200101906001600160f81b031916908160001a90535080601f0360080260020a60195481613b8357fe5b0460f81b83826102a00181518110613b9757fe5b60200101906001600160f81b031916908160001a9053506001016135a6565b600080600080613bc586614009565b9250925092506000806000613bd988614009565b92509250925082861015613bf7576000199650505050505050610ed8565b82861415613c4e5781851015613c17576000199650505050505050610ed8565b81851415613c4e5780841015613c37576000199650505050505050610ed8565b80841415613c4e5760009650505050505050610ed8565b50600198975050505050505050565b600081831115613c6c57600080fd5b50620151809190030490565b600082613c8757506000610ed8565b82820282848281613c9457fe5b041461186c5760405162461bcd60e51b81526004018080602001828103825260218152602001806144226021913960400191505060405180910390fd5b600061186c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506140c2565b60008282018381101561186c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b620151808102820182811015610ed857600080fd5b600061186c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614159565b60008481526011602090815260408083208054825181850281018501909352808352606093859084015b82821015613e8257600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460ff808216151560c08601526101009182900416151560e0850152600790910154908301529083529092019101613dee565b5050505060ff8781166000908152600a6020526040902054601254929350911615613ec657600854613ec390612a59908390600160981b900460ff16613c78565b90505b60008111613f055760405162461bcd60e51b815260040180806020018281038252602f8152602001806143f3602f913960400191505060405180910390fd5b85811015613f445760405162461bcd60e51b81526004018080602001828103825260238152602001806143776023913960400191505060405180910390fd5b6000805b8351811015613c4e57613f59614292565b848281518110613f6557fe5b60200260200101519050613f838888836020015184604001516131a1565b15613ff657613f96838260600151613d13565b9250613fa28484613cd1565b891115613ff6576040805162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820766163616e7420726f6f6d73000000000000000000604482015290519081900360640190fd5b50614002816001613d13565b9050613f48565b6000808061239d6201518085046141be565b6140236142e2565b506040805180820190915281518152602082810190820152919050565b60608082600001518460000151016040519080825280601f01601f191660200182016040528015614078576020820181803683370190505b50905060006020820190506140968186602001518760000151614254565b8451602085015185516140ac9284019190614254565b509392505050565b6000546001600160a01b0316ff5b600081848411156141515760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156141165781810151838201526020016140fe565b50505050905090810190601f1680156141435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836141a85760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156141165781810151838201526020016140fe565b5060008385816141b457fe5b0495945050505050565b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f846050028161421557fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b5b60208110614274578151835260209283019290910190601f1901614255565b905182516020929092036101000a6000190180199091169116179052565b604051806101200160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600081525090565b60405180604001604052806000815260200160008152509056fe46756c6c20626f61726420617267756d656e74206e6f742076616c696420286d7573742062652031206f72203229496e74657276616c73206e6f742076616c696420286f7665726c617070696e6729496e74657276616c206d75737420626520696e2072616e6765206f6620746865206167677265656d656e74546f74616c206e756d626572206f6620726f6f6d73206973206e6f7420656e6f75676841677265656d656e74206973206e6f7420726561636865642079657400000000436f6e7472616374207769746820636c61757365202d3e207769746864726177616c206f6620726f6f6d73206e6f7420706f737369626c652e526f6f6d7320776974682064657369726564206e756d626572206f66206265647320646f65736e2774206578697374536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f6e6c79206163636f6d6f646174696f6e20726570726573656e7461746976652063616e206578656375746520746869734f6e6c79206167656e637920726570726573656e7461746976652063616e206578656375746520746869734e756d626572206f66206b696473206578636565647320746f74616c206e756d626572206f662062656473a264697066735822122065550edcfdc92afbb58c28f26b97a16efb5c85cc6928b9a6c12e42cebe2ea9c264736f6c63430006030033546f74616c206e756d626572206f662062656473206973206e6f7420636f7272656374206e756d62657248616c662d626f6172642070726963652073686f756c64206265206c6f77657220746861742066756c6c2d626f617264207072696365456e642064617465206d75737420626520616674657220737461727420646174654b6964206d757374206265206c657373207468616e203138207965617273206f6c64";

    public static final String FUNC__ACCOMODATIONAGREED = "_accomodationAgreed";

    public static final String FUNC__ACCOMODATIONREPR = "_accomodationRepr";

    public static final String FUNC__ADVANCEPAYMENT = "_advancePayment";

    public static final String FUNC__AGENCYAGREED = "_agencyAgreed";

    public static final String FUNC__AGENCYREPR = "_agencyRepr";

    public static final String FUNC__BADOFFSEASONMAXPENALTY = "_badOffSeasonMaxPenalty";

    public static final String FUNC__CLAUSE = "_clause";

    public static final String FUNC__COMMISION = "_commision";

    public static final String FUNC__COURTINCHARGE = "_courtInCharge";

    public static final String FUNC__ENDDATE = "_endDate";

    public static final String FUNC__FINEPERBED = "_finePerBed";

    public static final String FUNC__HOTELS = "_hotels";

    public static final String FUNC__INFORMINGPERIOD = "_informingPeriod";

    public static final String FUNC__KIDAGELIMIT = "_kidAgeLimit";

    public static final String FUNC__KIDPRICE = "_kidPrice";

    public static final String FUNC__LAW = "_law";

    public static final String FUNC__PRESEASONMINIMUM = "_preSeasonMinimum";

    public static final String FUNC__PRICEFB = "_priceFB";

    public static final String FUNC__PRICEHB = "_priceHB";

    public static final String FUNC__PRICEOS = "_priceOS";

    public static final String FUNC__ROOMSBYBEDNUMBERS = "_roomsByBedNumbers";

    public static final String FUNC__SMALLKIDDISCOUNT = "_smallKidDiscount";

    public static final String FUNC__STARTDATE = "_startDate";

    public static final String FUNC__TOTALBEDS = "_totalBeds";

    public static final String FUNC__WITHDRAWALPERIOD = "_withdrawalPeriod";

    public static final String FUNC_ACCOMODATIONAGREED = "accomodationAgreed";

    public static final String FUNC_ADDDAYS2 = "addDays2";

    public static final String FUNC_AGENCYAGREED = "agencyAgreed";

    public static final String FUNC_BREAKCONTRACTACCOMODATION = "breakContractAccomodation";

    public static final String FUNC_BREAKCONTRACTAGENCY = "breakContractAgency";

    public static final String FUNC_CHECKOFFSEASON = "checkOffseason";

    public static final String FUNC_CONTRACTBALANCE = "contractBalance";

    public static final String FUNC_DAYINRANGE = "dayInRange";

    public static final String FUNC_DELEGATEACCOMODATION = "delegateAccomodation";

    public static final String FUNC_DELEGATEAGENCY = "delegateAgency";

    public static final String FUNC_GETAA = "getAA";

    public static final String FUNC_GETALLRESASBYTES = "getAllResAsBytes";

    public static final String FUNC_GETCONTRACTINFOASBYTES = "getContractInfoAsBytes";

    public static final String FUNC_GETCOURTINFO = "getCourtInfo";

    public static final String FUNC_GETHOTELS = "getHotels";

    public static final String FUNC_GETRESASBYTES = "getResAsBytes";

    public static final String FUNC_GETROOMSINFO = "getRoomsInfo";

    public static final String FUNC_GETWITHDRAWALSASBYTES = "getWithdrawalsAsBytes";

    public static final String FUNC_INCLUDING = "including";

    public static final String FUNC_ISAFTER = "isAfter";

    public static final String FUNC_ISAFTERORSAME = "isAfterOrSame";

    public static final String FUNC_ISBEFORE = "isBefore";

    public static final String FUNC_ISBEFOREORSAME = "isBeforeOrSame";

    public static final String FUNC_ISINRANGE = "isInRange";

    public static final String FUNC_ISSAME = "isSame";

    public static final String FUNC_OCCUPIEDBEDS = "occupiedBeds";

    public static final String FUNC_OVERLAPPING = "overlapping";

    public static final String FUNC_RESERVE = "reserve";

    public static final String FUNC_TODATE = "toDate";

    public static final String FUNC_TRANSFERONE = "transferOne";

    public static final String FUNC_VERIFYROOMINGLIST = "verifyRoomingList";

    public static final String FUNC_WITHDRAWROOMS = "withdrawRooms";

    public static final Event MYEVENT_EVENT = new Event("MyEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected Allotment(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Allotment(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Allotment(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Allotment(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<MyEventEventResponse> getMyEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MYEVENT_EVENT, transactionReceipt);
        ArrayList<MyEventEventResponse> responses = new ArrayList<MyEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MyEventEventResponse typedResponse = new MyEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.msg = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MyEventEventResponse> myEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MyEventEventResponse>() {
            @Override
            public MyEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MYEVENT_EVENT, log);
                MyEventEventResponse typedResponse = new MyEventEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.msg = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MyEventEventResponse> myEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MYEVENT_EVENT));
        return myEventEventFlowable(filter);
    }

    public RemoteFunctionCall<Boolean> _accomodationAgreed() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__ACCOMODATIONAGREED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> _accomodationRepr() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__ACCOMODATIONREPR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> _advancePayment() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__ADVANCEPAYMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> _agencyAgreed() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__AGENCYAGREED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> _agencyRepr() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__AGENCYREPR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> _badOffSeasonMaxPenalty() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__BADOFFSEASONMAXPENALTY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> _clause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__CLAUSE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> _commision() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__COMMISION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<String, String>> _courtInCharge() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__COURTINCHARGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> _endDate() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__ENDDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _finePerBed() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__FINEPERBED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _hotels(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__HOTELS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _informingPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__INFORMINGPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _kidAgeLimit() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__KIDAGELIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _kidPrice() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__KIDPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> _law() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__LAW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> _preSeasonMinimum() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__PRESEASONMINIMUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _priceFB() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__PRICEFB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _priceHB() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__PRICEHB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _priceOS() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__PRICEOS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _roomsByBedNumbers(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__ROOMSBYBEDNUMBERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _smallKidDiscount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__SMALLKIDDISCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _startDate() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__STARTDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _totalBeds() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__TOTALBEDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _withdrawalPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__WITHDRAWALPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> accomodationAgreed(BigInteger accReprId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACCOMODATIONAGREED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(accReprId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> addDays2(BigInteger timestamp, BigInteger daysToAdd) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADDDAYS2, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp), 
                new org.web3j.abi.datatypes.generated.Uint256(daysToAdd)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> agencyAgreed(BigInteger agReprId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AGENCYAGREED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(agReprId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> breakContractAccomodation() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BREAKCONTRACTACCOMODATION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> breakContractAgency() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BREAKCONTRACTAGENCY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> checkOffseason() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHECKOFFSEASON, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> contractBalance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> dayInRange(BigInteger checkDate, BigInteger startRange, BigInteger endRange) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DAYINRANGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(checkDate), 
                new org.web3j.abi.datatypes.generated.Uint256(startRange), 
                new org.web3j.abi.datatypes.generated.Uint256(endRange)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> delegateAccomodation(String newRepresentative) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELEGATEACCOMODATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newRepresentative)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> delegateAgency(String newRepresentative) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELEGATEAGENCY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newRepresentative)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getAA(BigInteger beds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(beds)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> getAllResAsBytes() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLRESASBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> getContractInfoAsBytes() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCONTRACTINFOASBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getCourtInfo() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCOURTINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getHotels() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETHOTELS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getResAsBytes(BigInteger beds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETRESASBYTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(beds)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> getRoomsInfo() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROOMSINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> getWithdrawalsAsBytes() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETWITHDRAWALSASBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> including(BigInteger from1, BigInteger to1, BigInteger from2, BigInteger to2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INCLUDING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(from1), 
                new org.web3j.abi.datatypes.generated.Uint256(to1), 
                new org.web3j.abi.datatypes.generated.Uint256(from2), 
                new org.web3j.abi.datatypes.generated.Uint256(to2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isAfter(BigInteger timestamp1, BigInteger timestamp2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAFTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isAfterOrSame(BigInteger timestamp1, BigInteger timestamp2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAFTERORSAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isBefore(BigInteger timestamp1, BigInteger timestamp2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISBEFORE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isBeforeOrSame(BigInteger timestamp1, BigInteger timestamp2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISBEFOREORSAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isInRange(BigInteger checkDate, BigInteger daysFromToday) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISINRANGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(checkDate), 
                new org.web3j.abi.datatypes.generated.Uint256(daysFromToday)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isSame(BigInteger timestamp1, BigInteger timestamp2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp1), 
                new org.web3j.abi.datatypes.generated.Uint256(timestamp2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> occupiedBeds(BigInteger itDay) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OCCUPIEDBEDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itDay)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> overlapping(BigInteger from1, BigInteger to1, BigInteger from2, BigInteger to2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OVERLAPPING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(from1), 
                new org.web3j.abi.datatypes.generated.Uint256(to1), 
                new org.web3j.abi.datatypes.generated.Uint256(from2), 
                new org.web3j.abi.datatypes.generated.Uint256(to2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> reserve(List<BigInteger> reservation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESERVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray6<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(reservation, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> toDate(BigInteger timestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TODATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transferOne() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERONE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> verifyRoomingList(BigInteger beds, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_VERIFYROOMINGLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(beds), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawRooms(BigInteger startDate, BigInteger endDate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWROOMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Allotment load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Allotment(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Allotment load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Allotment(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Allotment load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Allotment(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Allotment load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Allotment(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Allotment> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray6<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Allotment> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray6<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Allotment> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray6<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Allotment> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String agencyRepr, String accomodationRepr, BigInteger startDate, BigInteger endDate, List<BigInteger> hotels, List<BigInteger> prices, List<BigInteger> someConstrains, List<BigInteger> roomsInfo, List<BigInteger> periods, Boolean clause, BigInteger advancePayment, BigInteger commision, BigInteger finePerBed, String courtName, String courtLocation) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, agencyRepr), 
                new org.web3j.abi.datatypes.Address(160, accomodationRepr), 
                new org.web3j.abi.datatypes.generated.Uint256(startDate), 
                new org.web3j.abi.datatypes.generated.Uint256(endDate), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(hotels, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint32>(
                        org.web3j.abi.datatypes.generated.Uint32.class,
                        org.web3j.abi.Utils.typeMap(prices, org.web3j.abi.datatypes.generated.Uint32.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray6<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(someConstrains, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomsInfo, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint16>(
                        org.web3j.abi.datatypes.generated.Uint16.class,
                        org.web3j.abi.Utils.typeMap(periods, org.web3j.abi.datatypes.generated.Uint16.class)), 
                new org.web3j.abi.datatypes.Bool(clause), 
                new org.web3j.abi.datatypes.generated.Uint256(advancePayment), 
                new org.web3j.abi.datatypes.generated.Uint8(commision), 
                new org.web3j.abi.datatypes.generated.Uint256(finePerBed), 
                new org.web3j.abi.datatypes.Utf8String(courtName), 
                new org.web3j.abi.datatypes.Utf8String(courtLocation)));
        return deployRemoteCall(Allotment.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class MyEventEventResponse extends BaseEventResponse {
        public BigInteger code;

        public String msg;
    }
}
